name: CI/CD Pipeline for Python App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Step 4: Run tests
      - name: Run Tests
        run: |
          python -m unittest discover -s tests

      # Step 5: Build Docker image with unique tag
      - name: Build Docker Image With Unique Tag
        run: |
          export IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          docker build --no-cache -t ci-cd-python-app:${IMAGE_TAG} .
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      # Step 6: Save Docker image in 'latest_build' folder
      - name: Save Docker Image to 'latest_build'
        run: |
          mkdir -p /mnt/cs_devops/ci-cd-python/latest_build
          docker save -o /mnt/cs_devops/ci-cd-python/latest_build/ci-cd-python-app_${{ env.IMAGE_TAG }}.tar ci-cd-python-app:${{ env.IMAGE_TAG }}

      # Step 7: Run container (detached) for logging
      - name: Run Container (Detached) for Logging
        run: |
          docker run -dit --name ci-cd-python-app ci-cd-python-app:${{ env.IMAGE_TAG }}
          sleep 5

      # Step 8: Capture logs before container exits
      - name: Save Logs as Artifact
        run: |
          sleep 5
          docker logs ci-cd-python-app > /mnt/cs_devops/ci-cd-python/latest_build/logs/pipeline_logs.txt
          

      # Step 9: Cleanup (Remove container after logging)
      - name: Remove Container After Logging
        run: |
          docker stop ci-cd-python-app
          docker rm ci-cd-python-app

      # Step 10: Copy pipeline logs to monitoring agent folder
      - name: Copy Pipeline Logs to Monitor Agent
        run: |
          mkdir -p /mnt/cs_devops/monitor-agent/logs/pipeline_logs
          cp -r /mnt/cs_devops/ci-cd-python/latest_build/logs /mnt/cs_devops/monitor-agent/logs/pipeline_logs/

      # Step 11: Upload Pipeline Logs as artifact
      - name: Upload Pipeline Logs
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs
          path: /mnt/cs_devops/ci-cd-python/latest_build/logs/
      
      # Need to remove logging steps because actual logging by the app is not happening            
